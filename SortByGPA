#include <fstream>
#include <iostream>
#include <bits/stdc++.h>
#include <chrono>
using namespace std;
using namespace std::chrono;
ofstream file("SortedByName.txt");
//class student and it''s constructor
class Student{
public:
    string id;
    string name;
    double gpa;
    Student() :  name("Unknown"),id(0),gpa(0.0) {}
    Student(string n,string ID,double GPA){
        name = n;
        id = ID;
        gpa = GPA;
    }
    bool operator>(Student& other){ // To sort by name.
        return this->gpa > other.gpa;
    }
    bool operator<=(const Student& other) const {
        return this->gpa <= other.gpa;
    }
    friend ostream& operator<<(ostream& OS,const Student& s){
        OS << "Student Name: " << s.name << "\n"<< "Student ID: " << s.id << "\n"<< "Student GPA: " << s.gpa << "\n";
        return OS;
    }
};
//read from file
vector<Student> readStudents(const string& filename) {
    ifstream file(filename);
    if (!file.is_open()) {
        cerr << "Could not open file: " << filename << endl;
        return {};
    }

    vector<Student> students;
    string name;
    string id;
    double gpa;
    while (file >> name >> id >> gpa) {
        students.emplace_back(name, id, gpa);
    }

    return students;
}
void writeSortedResults(const string& filename, const string& algorithmName, const int& comparisons,double runningTime, const vector<Student>& students) {
    ofstream file(filename, ios::app); // Append to file
    if (!file.is_open()) {
        cerr << "Could not open file: " << filename << endl;
        return;
    }
    file << "\n----------------------------\n" ;
    file << "Algorithm: " << algorithmName << "\n";
    file<<"The Number Of Comparisons is : "<<comparisons<<"\n";
    file << "Running Time: " << runningTime * 1000 << " milliseconds\n"; // Convert to milliseconds
    for (const auto& student : students) {
        file << student;
    }
}

//templates of sorting algorithms
template <typename T>
vector<T> insertion_sort(vector<T>&Students,int& comparisons){
    int n=Students.size();
    for(int i=1;i<n;i++){
        int j=i;
        while (j > 0 &&   Students[j]>Students[j - 1]){
            T temp=Students[j];
            Students[j] = Students[j - 1];
            Students[j - 1] = temp;
            j--;
            comparisons++;
        }
    }file<<"The Number Of Comparisons is : "<<comparisons<<"\n";
    return Students;
}
template<typename T>
vector<T> selection_sort(vector<T>&Students,int& comparisons){
    int n=Students.size();
    for(int i=0;i<n-1;i++){
        int mx_inx=i;
        for(int j=i+1;j<n;j++){
            if(Students[j]>Students[mx_inx]){
                mx_inx=j;
                comparisons++;
            }
        }
    }file<<"The Number Of Comparisons is : "<<comparisons<<"\n";
    return Students;
}
template<typename T>
vector<T> bubble_sort(vector<T>&Students,int& comparisons){
    int n=Students.size();
    bool swapped;
    for (int i = 0; i < n - 1; i++) {
        swapped = false;
        for (int j = 0; j < n - i - 1; ++j) {
            if (Students[j + 1]>Students[j]) {
                T temp=Students[j];
                Students[j] = Students[j +1];
                Students[j + 1] = temp;
                swapped = true;
            }
            comparisons++;
        }
        if (!swapped) break;
    }file<<"The Number Of Comparisons is : "<<comparisons<<"\n";
    return Students;
}
template<typename T>
vector<T> shell_sort(vector<T>&Students,int& comparisons){
    int n=Students.size();
    for(int gap=n/2;gap>0;gap/=2){
        for(int i=gap;i<n;i++){
            T temp=Students[i];
            int j;
            for(j=i;j >= gap &&  temp>Students[j - gap]; j -= gap) {
                Students[j] = Students[j - gap];
                comparisons++;
            }
            Students[j] = temp;
        }
    }file<<"The Number Of Comparisons is : "<<comparisons<<"\n";
    return Students;
}
//---------------------------------------------------------------------------------------------------------------------
template<typename T>
vector<T> merge_sort(vector<T>& Students, int left, int right, int& comparisons) {
    if (left >= right) {
        vector<T> result(1, Students[left]); // Base case: Return a vector with a single element
        return result;
    }

    int middle = left + (right - left) / 2; // Find the middle point

    // Recursively sort the first and second halves
    vector<T> L = merge_sort(Students, left, middle, comparisons); // Conquer the first half
    vector<T> R = merge_sort(Students, middle + 1, right, comparisons); // Conquer the second half

    // Merge the sorted halves (descending order)
    vector<T> merged;
    int idxL = 0, idxR = 0;
    while (idxL < L.size() && idxR < R.size()) {
        if (R[idxR]<=L[idxL] ) { // Use `>=` for descending
            merged.push_back(L[idxL]);
            idxL++;
        } else {
            merged.push_back(R[idxR]);
            idxR++;
        }
        comparisons++; // Increment the comparisons count
    }

    // Copy remaining elements from leftHalf, if any
    while (idxL < L.size()) {
        merged.push_back(L[idxL]);
        idxL++;
    }

    // Copy remaining elements from rightHalf, if any
    while (idxR < R.size()) {
        merged.push_back(R[idxR]);
        idxR++;
    }file<<"The Number Of Comparisons is : "<<comparisons<<"\n";

    return merged; // Return the merged vector in descending order
}
//----------------------------------------------------------------------------------------------------------------------------

template<typename T>
int Partition(vector<T>&Students,int left,int right,int& comparisons){
    T x=Students[left];
    int idx=left;
    for(int i=left+1;i<=right;i++){
        if(Students[i]>x){
            idx+=1;
            T temp=Students[idx];
            Students[idx] = Students[i];
            Students[i] = temp;
        }
        comparisons++;
    }
    T temp=Students[idx];
    Students[idx] = Students[left];
    Students[left] = temp;
    return idx;
}
template<typename T>
vector<T> quick_sort(vector<T>&Students,int left,int right,int& comparisons){
    if(left>=right){
        return Students;// base case
    }else{
        int middle= Partition(Students,left,right,comparisons);
        quick_sort(Students,left,middle-1,comparisons);
        quick_sort(Students,middle+1,right,comparisons);
    }file<<"The Number Of Comparisons is : "<<comparisons<<"\n";
    return Students;
}
//template<typename T>
//vector<T> count_Sort(vector<T>& Students,int mx) {
//    int n=Students.size();
//    int mx=0;
//    int comparisons=0;
//    for(const auto &item:Students){
//        if(item>mx){mx=item;}
//    }
//   vector<int> count(mx + 1, 0);
//    for(int i=0;i<n;i++){
//        count[Students[i]]++;
//    }for(int i=1;i<mx;i++){
//        count[i]+=count[i-1];
//    }vector<T>out(n);
//    for(int i=n-1;n>=0;i--){
//        out[count[Students[i]--]-1]=Students[i];
//    }
//    return out;
//}

//write to file



int main() {
    vector<Student> students = readStudents("students.txt");

    // Insertion Sort
    auto start = chrono::high_resolution_clock::now();
    int comparisons=0;
    vector<Student> insertionSorted = insertion_sort(students,comparisons);
    auto end = chrono::high_resolution_clock::now();
    chrono::duration<double> insertionTime = end - start;
    writeSortedResults("SortedByGPA.txt", "Insertion Sort",comparisons, insertionTime.count(), insertionSorted);
    students.clear();

    // Selection Sort
    students = readStudents("students.txt");
    start = chrono::high_resolution_clock::now();
    comparisons=0;
    vector<Student> selectionSorted = selection_sort(students,comparisons);
    end = chrono::high_resolution_clock::now();
    chrono::duration<double> selectionTime = end - start;
    writeSortedResults("SortedByGPA.txt", "Selection Sort",comparisons, selectionTime.count(), selectionSorted);
    students.clear();

    // Bubble Sort
    students = readStudents("students.txt");
    start = chrono::high_resolution_clock::now();
    comparisons=0;
    vector<Student> bubblesort = bubble_sort(students,comparisons);
    end = chrono::high_resolution_clock::now();
    chrono::duration<double> bubbleTime = end - start;
    writeSortedResults("SortedByGPA.txt", "Bubble Sort",comparisons, bubbleTime.count(), bubblesort);
    students.clear();

    //Shell sort
    students = readStudents("students.txt");
    start = chrono::high_resolution_clock::now();
    comparisons=0;
    vector<Student> shellsort = shell_sort(students,comparisons);
    end = chrono::high_resolution_clock::now();
    chrono::duration<double> shellTime = end - start;
    writeSortedResults("SortedByGPA.txt", "Shell Sort",comparisons, shellTime.count(), shellsort);
    students.clear();

    //Merge sort
    students = readStudents("students.txt");
    start = chrono::high_resolution_clock::now();
    comparisons = 0;
    vector<Student> mergesort = merge_sort(students, 0, students.size() - 1, comparisons);
    end = chrono::high_resolution_clock::now();
    chrono::duration<double> mergeTime = end - start;
    writeSortedResults("SortedByGPA.txt", "Merge Sort",comparisons, mergeTime.count(), mergesort);
    students.clear();

    //Quick sort
    students = readStudents("students.txt");
    start = chrono::high_resolution_clock::now();
    comparisons=0;
    vector<Student> quicksort = quick_sort(students,0,students.size()-1,comparisons);
    end = chrono::high_resolution_clock::now();
    chrono::duration<double> quickTime = end - start;
    writeSortedResults("SortedByGPA.txt", "Quick Sort",comparisons, quickTime.count(), quicksort);
    //Count sort

//    start = chrono::high_resolution_clock::now();
//    int mx=0;
//    for (const auto& student : students) {
//        if (student.gpa > mx) {
//            mx = student.gpa;
//        }
//    }
//    vector<Student> countsort = count_Sort(students,mx);
//    end = chrono::high_resolution_clock::now();
//    chrono::duration<double> countTime = end - start;
//    writeSortedResults("SortedByGPA.txt", "Count Sort", countTime.count(), countsort);



    return 0;
}
